#extension GL_OES_standard_derivatives : enable
// oldschool sinus-scroller by emptyhead
// encodes bitmap data (2bpp 16x15) in matrices 
//
// ok, nice scroller! tweaked some minor parts! -rf ..well, made the text bluish, ok. 
// added wavy horizon/text. -rf

precision highp float;

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

float horizon;

float shift_right(float v, float amt) {
	v = floor(v) + 0.5;
	return floor(v * exp2(-amt));
}

float shift_left(float v, float amt) {
	return floor(v * exp2(amt) + .5);
}

float mask_last(float v, float bits) {
	return mod(v, shift_left(1.0, bits));
}
float extract_bits(float v, float from, float n) {
	return mask_last(shift_right(v, from), n);
}

float tex(float val, float j) {
	float sign = val > 130.0 ? 0.0 : 1.0;
	val = abs(val);
	float exponent = floor(log2(val));
	float biased_exponent = exponent + 63.0;
	float mantissa = ((val * exp2(-exponent)) - 1.0) * 8388608.0;

	float index = j * 2.0;
	if (j == 0.0) {
		return sign + mod(biased_exponent, 2.0) * 2.0;
	} else if (j < 4.){
		index -= 1.;
		return extract_bits(biased_exponent, index, 2.0);
	} else {
		index -= 7.;
		return extract_bits(mantissa, index, 2.0);
	}
}

float ch(mat4 m, float c, vec2 uv) {
	if (max(abs(uv.x), abs(uv.y)) < .5) {
		float i = floor(uv.x * 16.) + 8.;
		float j = floor(uv.y * 16.) + 8.;
		vec4 v = m[3];
		if (i < 8.) {
			v = (i < 4.) ? m[0] : m[1];
		} else if (i < 12.) {
			v = m[2];
		}
		i = mod(i, 4.);
		if (i < 2.) {
			if (i==0.) return tex(v.x, j);
			return tex(v.y, j);
		} else {
			if (i==2.) return tex(v.z, j);
			return tex(v.w, j);
		}
	}
	return c;
}

vec3 ground(vec2 uv) {

	
	float fov = 0.55;
	float scaling = 0.06;

	vec3 p = vec3(uv.x, fov, uv.y - horizon);
	vec2 s = vec2(p.x/p.z-5.*time, p.y/p.z-time) * scaling;

	float color;
	if (uv.y < horizon) {
	  color = sign((mod(s.x+sin(0.3), 0.1) - 0.05) * (mod(s.y, 0.1) - 0.05)) * p.z*2.4;
	} else {
	   color = 0.0;
	}
	return vec3(color);
}

vec3 copper(in vec3 c) {
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
	rgb = rgb*rgb*(3.0-2.0*rgb);
	return c.z * mix( vec3(1.0), rgb, c.y) * vec3(1.0,1.0,2.5);
}

float N21(vec2 p){
	p = fract(p*vec2(1234.334,125.64));
	p+=dot(p,p+25.34);
	return fract(p.x*p.y);
}

vec2 N22(vec2 p){
	float n = N21(p);
	return vec2(n,N21(p+n));
}

vec2 starPos(vec2 id,vec2 offs){
	vec2 n = N22(id+offs);
	return offs+(n)*.8;
}

float starLayer(vec2 uv) {
	if (uv.y < 0.) return 0.;

	vec2 id = floor(uv);
	vec2 fd = fract(uv)-.5;
	vec2 p[9];
	p[0] = starPos(id,vec2(-1,-1));
	p[1] = starPos(id,vec2(0,-1));
	p[2] = starPos(id,vec2(1,-1));
	p[3] = starPos(id,vec2(-1,0));
	p[4] = starPos(id,vec2(0,0));
	p[5] = starPos(id,vec2(1,0));
	p[6] = starPos(id,vec2(-1,1));
	p[7] = starPos(id,vec2(0,1));
	p[8] = starPos(id,vec2(1,1));
	float m = 0.;
	for (int i=0;i<9;i++) {
		vec2 d = (p[i] - fd);
		m += smoothstep( .07, .02, abs(d.x)+abs(d.y));
	}

	return m;
}

vec3 stars(vec2 uv) {
	vec3 col = vec3(0.);

	float m = 0.;
	float t = time*.5;

	for (float i=0.;i<1.;i+=1./5.) {
		float z = fract(i);
		float scale = mix(30.,.25, z);
		float fade = smoothstep(0.,.6, z);
		float border = horizon;
		if (uv.y >border) m += starLayer(uv*scale+vec2(i*113.+time, z*scale*.25))*fade;
	}

	return vec3(m);
}


const mat4 A = mat4(1.19218981354e-07, 2050.70800781, -527189.25, -537941.25, -578901.25, -2261.33300781, -6.75373598824e-07, 6.74907482789e-07, 1.53595161289e-19, 1.31626876509e-07, 2261.33300781, -537941.25, -527189.25, -2050.70800781, -4.76875925415e-07, 4.76839545627e-07);
const mat4 B = mat4(1.21692806943e-07, 2229.33300781, -709973.25, -742741.25, -742741.25, -742741.25, -740050.75, -740180.75, -742741.25, -742741.25, -742741.25, -578869.25, -2261.20800781, -4.8910192163e-07, 4.79313371216e-07, 1.19354950812e-07);
const mat4 C = mat4(1.08984897264e-19, 4.75968708891e-10, 1.29764259782e-07, 2261.33300781, 2773.33300781, -742741.25, -742709.25,-742573.25, -742573.25, -742701.25, -2773.20800781, -2261.20800781, 5.18911519976e-07, 4.86773501507e-07, 1.19830161793e-07, 4.65670724203e-10);
const mat4 D = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -742741.25, -740011.25, -742061.25, -742741.25, -2773.33300781, -2261.33300781, 5.19057039128e-07, 4.87391957904e-07, 1.19868815318e-07, 4.66267580101e-10, 1.08429006043e-19);
const mat4 E = mat4(4.75362527119e-10, 557.333251953, 709973.25, -742741.25, -742741.25, -742741.25, -742741.25, -742227.25, -742227.25, -742227.25, -742227.25, -742091.25, -709291.25, -2218.66699219, -4.86616613671e-07, 4.7683727189e-07);
const mat4 F = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2901.33300781, -6.75051182952e-07, 6.75051182952e-07, 1.53488842731e-19, 1.53488842731e-19, 1.5346071859e-19, 1.53453997747e-19, 1.53446966712e-19, 1.19140477987e-19, 1.10670148515e-19, 1.08949612841e-19);
const mat4 G = mat4(1.08984871414e-19, 4.75968708891e-10, 1.29764259782e-07, 2261.33300781, 2773.33300781, -742741.25, -742573.25,-742059.25, -742099.25, -742101.25, -2898.83300781, -2898.83300781, 5.25925543116e-07, 4.86780777464e-07, 1.19830161793e-07, 4.65663618776e-10);
const mat4 H = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -709973.25, -2219.33300781, -5.1671906931e-07, 6.45707245894e-07, 2901.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.16573550158e-07, 4.8677122777e-07);
const mat4 I = mat4(1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.29104734015e-07, 2770.66699219, -742741.25, -742741.25, -742741.25, -742741.25, -742741.25, -2770.66699219, -5.16573550158e-07, 4.86732574245e-07, 1.08420217249e-19, 1.08420217249e-19);
const mat4 J = mat4(1.08420217249e-19, 4.65663618776e-10, 1.19211847505e-07, 2048.05175781, 2048.05175781, -524301.25, -524291.25,-524299.25, -567981.25, -709973.25, -2901.33300781, -2901.33300781, 6.75519231663e-07, 6.45716795589e-07, 1.29143387539e-07, 4.75362527119e-10);
const mat4 K = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -709973.25, -2219.33300781, -4.87391957904e-07, 5.19057039128e-07, 2261.33300781, -742741.25, -742709.25, -742573.25, -2770.66894531, -5.165662742e-07, 4.86616613671e-07);
const mat4 L = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -709973.25, -567981.25, -535213.25, -524301.25, -524301.25, -524301.25, -2048.05175781, -4.76847390019e-07, 4.76839545627e-07, 1.19209431659e-07, 1.08420217249e-19);
const mat4 M = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.19047375747e-07, 4.87389684167e-07, 1.29761843937e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.16573550158e-07, 4.8677122777e-07);
const mat4 N = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.19056470694e-07, 4.87391957904e-07, 1.29182183173e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.16573550158e-07, 4.8677122777e-07);
const mat4 O = mat4(1.08984897264e-19, 4.75968708891e-10, 1.29764259782e-07, 2261.33300781, 2773.33300781, -742741.25, -742581.25,-742061.25, -742581.25, -742741.25, -2773.33300781, -2261.33300781, 5.19057039128e-07, 4.87391957904e-07, 1.19830161793e-07, 4.66267580101e-10);
const mat4 P = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -742741.25, -2901.33300781, -6.73190356792e-07, 6.75053001942e-07, 1.53595161289e-19, 1.53595161289e-19, 1.19713429808e-19, 1.19713429808e-19, 1.11241420125e-19, 1.08984871414e-19, 1.08561251543e-19);
const mat4 Q = mat4(1.08984897264e-19, 4.75968708891e-10, 1.29764259782e-07, 2261.33300781, 2773.33300781, -742741.25, -742581.25,-742061.25, -2900.70800781, -2773.33300781, -578901.25, -570709.25, -535891.25, -2058.66699219, 4.77457547277e-07, 1.19209289551e-07);
const mat4 R = mat4(1.21692806943e-07, 2229.33300781, -709973.25, -742741.25, -742741.25, -742741.25, -2901.33300781, -6.7319081154e-07, 6.75053570376e-07, 2901.33300781, 742741.25, -578901.25, -578893.25, -2101.16894531, -4.79320647173e-07, 4.77455728287e-07);
const mat4 S = mat4(4.75326999982e-10, 1.29725606257e-07, 2261.17675781, 2773.30175781, -742733.25, -742739.25, -742739.25, -742741.25, -742229.25, -742229.25, -742613.25, -2772.83300781, 2260.70800781, 5.18438582731e-07, 1.21690987953e-07, 4.66230276608e-10);
const mat4 T = mat4(1.17419942313e-19, 1.46669048773e-19, 1.53557808914e-19, 1.53557808914e-19, 1.68841012282e-07, 2901.33300781, -742741.25, -742741.25, -742741.25, -2901.33300781, -6.7536404913e-07, 6.7536404913e-07, 1.53557808914e-19, 1.46675666218e-19, 1.17453029538e-19, 1.10670148515e-19);
const mat4 U = mat4(1.17455226736e-19, 6.30582808192e-10, 1.68879807916e-07, 2901.33300781, 2901.33300781, -709973.25, -567989.25,-535213.25, -567989.25, -709973.25, -2901.33300781, -2901.33300781, 6.75519231663e-07, 6.45716795589e-07, 1.29143387539e-07, 4.75362527119e-10);
const mat4 V = mat4(1.17454683899e-19, 1.4681680391e-19, 1.53595161289e-19, 6.59686638649e-10, 1.68879807916e-07, 2773.33300781, -568021.25, -535221.25, -568021.25, -2773.33300781, -6.75519231663e-07, 6.75519117976e-07, 1.68879665807e-07, 6.30573482319e-10, 1.17455226736e-19, 1.10678833911e-19);
const mat4 W = mat4(1.29143387539e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.16583213539e-07, 4.86809881295e-07, 1.29145803385e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.16573550158e-07, 4.8677122777e-07);
const mat4 X = mat4(1.29105188762e-07, 2770.54394531, -742573.25, -742709.25, -742741.25, -2773.33300781, -5.19057039128e-07, 4.87391957904e-07, 1.29764259782e-07, 2773.33300781, -742741.25, -742709.25, -742573.25, -2770.66894531, -5.165662742e-07, 4.86733028993e-07);
const mat4 Y = mat4(1.17446412093e-19, 1.46781545336e-19, 1.53585933055e-19, 1.5359296409e-19, 1.6887921106e-07, 2773.33300781, -570709.25, -535893.25, -570709.25, -2773.33300781, -6.7551684424e-07, 6.75509568282e-07, 1.53586450043e-19, 1.46783613288e-19, 1.17454683899e-19, 1.1067676596e-19);
const mat4 Z = mat4(5.03860619894e-10, 692.503173828, 741901.25, -741941.25, -742101.25, -742229.25, -742741.25, -742741.25, -742741.25, -742739.25, -742731.25, -742699.25, -578731.25, -2090.62792969, -4.79281993648e-07, 4.76837158203e-07);
const mat4 _0 = mat4(1.08455372425e-19, 1.0899316907e-19, 4.75968708891e-10, 1.29764259782e-07, 2773.33300781, -2773.33300781, -742069.25, -740013.25, -742069.25, -2773.33300781, -2773.33300781, -5.19057039128e-07, 4.87391957904e-07, 1.1983925674e-07, 4.66267580101e-10, 1.08429006043e-19);
const mat4 _1 = mat4(1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.10670148515e-19, 1.29725464149e-07, 2773.33300781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.16573550158e-07, 4.8677122777e-07, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19);
const mat4 _2 = mat4(1.21654608165e-07, 2226.55175781, -578741.25, -709845.25, -742613.25, -742229.25, -742229.25, -742741.25, -742739.25, -742739.25, -742731.25, -709963.25, -578859.25, -2228.66699219, -4.86769408781e-07, 4.79311097479e-07);
const mat4 _3 = mat4(4.75213313145e-10, 1.29601914978e-07, 2260.67675781, 2772.67675781, -742605.25, -742227.25, -742227.25, -742741.25, -742741.25, -742741.25, -742741.25, -2773.33300781, 2261.20800781, 5.18904244018e-07, 1.21692806943e-07, 4.68051042368e-10);
const mat4 _4 = mat4(1.08455501672e-19, 4.66305327684e-10, 4.68238114948e-10, 4.75968819913e-10, 5.06891639773e-10, 5.14167597387e-10, 1.68872531958e-07, 2900.70800781, -742741.25, -742741.25, -742741.25, -2773.33300781, -5.16583213539e-07, 4.86773501507e-07, 4.65812832751e-10, 1.08420760086e-19);
const mat4 _5 = mat4(5.04459252149e-10, 1.61419677625e-07, 2901.30175781, 2901.30175781, -742733.25, -742731.25, -742731.25, -742739.25, -742229.25, -742229.25, -742229.25, -2898.83300781, -2898.83300781, 6.43243083687e-07, 5.16544446327e-07, 1.21654608165e-07);
const mat4 _6 = mat4(1.08984897264e-19, 4.75968708891e-10, 1.29764259782e-07, 2261.33300781, 2773.33300781, -742741.25, -742731.25,-742219.25, -742227.25, -742229.25, -2899.33300781, -2763.33300781, 5.16612317369e-07, 4.86780777464e-07, 1.19218981354e-07, 4.65670724203e-10);
const mat4 _7 = mat4(1.17419942313e-19, 1.46669048773e-19, 1.53557808914e-19, 1.68838624859e-07, 2900.63574219, -742573.25, -742613.25, -742741.25, -742741.25, -2901.33300781, -6.75519117976e-07, 6.7551684424e-07, 6.59648891066e-10, 1.46677837567e-19, 1.17454683899e-19, 1.10670148515e-19);
const mat4 _8 = mat4(4.75326999982e-10, 1.29726061004e-07, 2261.20800781, -709973.25, -742741.25, -742741.25, -742738.75, -740178.75, -740181.25, -742741.25, -742741.25, -709973.25, -2261.20800781, 5.18904244018e-07, 1.21692806943e-07, 4.68051042368e-10);
const mat4 _9 = mat4(1.08982700065e-19, 1.10810769219e-19, 1.29761843937e-07, 2261.32324219, -709971.25, -742739.25, -742227.25, -740179.25, -742229.25, -742741.25, -2773.33300781, -2261.33300781, 5.19057039128e-07, 4.87391957904e-07, 1.19830161793e-07, 4.66267580101e-10);
const mat4 dot = mat4(1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.19209431659e-07, 2048.01074219, -524291.25, -524291.25, -524291.25, -2048.01074219, -4.76837726637e-07, 4.7683727189e-07, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19);
const mat4 comma = mat4(1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420760086e-19, 1.19211819083e-07, 0.000122073397506, -524301.25, -2048.05175781, -4.76847390019e-07, 4.76839545627e-07, 1.19209431659e-07, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19);
const mat4 bang = mat4(1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.29142932792e-07, 2773.29199219, -742739.25, -742739.25, -742739.25, -2773.29199219, -5.16573550158e-07, 4.86770773023e-07, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19, 1.08420217249e-19);
const mat4 qm = mat4(1.08420217249e-19, 1.10643678735e-19, 1.17869928566e-19, 1.19676491024e-19, 1.68838738546e-07, 2900.66699219,-742219.25, -742739.25, -742739.25, -2901.32324219, -6.75509568282e-07, 6.45678142064e-07, 1.17984493081e-19, 1.10678420321e-19, 1.08982700065e-19, 1.08420217249e-19);

#define CHAR_W (17./16.)
#define _(cc) col = ch(cc, col, uv); uv.x -= CHAR_W;
#define SP uv.x -= CHAR_W;

const float text_width = 20.0 * CHAR_W;

float scroll(vec2 uv) {
	float zoom = 14.0;
	uv *= zoom;

	uv.x = mod(uv.x +4.0*time, text_width) - 0.5;
	uv.y -= 154242.0*horizon;
	//uv.y += sin(uv.x + time * 4.0) * 0.5;
	//uv.y += floor(uv.x*4.) *0.15 ;

	float col = 0.0;

	_(S)_(U)_(C)_(A)
	return pow(col,32.0)*21.66*(sin(time)*0.5+0.7);
}


void main(void) {
	vec2 uv = ( gl_FragCoord.xy/resolution.xy ) -.5;
	uv.x*=resolution.x/resolution.y;
	vec3 col = ground(uv);
	col += stars(uv);
	if (uv.y > -.4) 
	{
		vec3 copper = copper(vec3(uv.y*4.0-time*01.4,0.3,0.4));
		float text = scroll(uv)+scroll(uv*vec2(2.0,-1.0)-vec2(0.0,0.68))*0.5;
		col = text > 10.0 ? vec3(0.5)*text*copper : col;
	}

	gl_FragColor = vec4(col,56.0);

}
